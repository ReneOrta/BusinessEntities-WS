package mx.edu.itcm.businessentities.serviceImpl;

import java.util.ArrayList;
import java.util.List;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

import mx.edu.itcm.businessentities.dto.PersonDto;
import mx.edu.itcm.businessentities.dto.PersonDtoResponse;
import mx.edu.itcm.businessentities.entity.Person;
import mx.edu.itcm.businessentities.repository.PersonRepository;
import mx.edu.itcm.businessentities.service.PersonService;

@Service
@Component
public class PersonServiceImpl implements  PersonService {
	
	@Autowired
	PersonRepository personRepository;
	
	@Autowired
	ModelMapper modelMapper;
	
	@Override
	public PersonDtoResponse create(PersonDto personDto) throws Exception {
			try {
				Person person=modelMapper.map(personDto,Person.class);
				System.out.println("Creating: "+person.toString());
				Person newPerson=personRepository.save(person);
				return modelMapper.map(newPerson, PersonDtoResponse.class);
			}catch(Exception e) {
				throw e;
			}
	}

	@Override
	public PersonDtoResponse findOneById(int businessEntityID) {
		return modelMapper.map(personRepository, PersonDtoResponse.class);
	}

	@Override
	public PersonDtoResponse finOneByFrsName(String personFrsName) {
		return modelMapper.map(personRepository.finOneByFrsName(personFrsName), PersonDtoResponse.class);
	}

	@Override
	public PersonDtoResponse finOneByLsName(String personLsName) {
		return modelMapper.map(personRepository.finOneByLsName(personLsName), PersonDtoResponse.class);
	}

	@Override
	public PersonDtoResponse save(PersonDto newPerson) {
		Person person= modelMapper.map(newPerson, Person.class);
		return modelMapper.map(personRepository.save(person), PersonDtoResponse.class);
	}

	@Override
	public List<PersonDtoResponse> getAll() {
		List<Person> persons=personRepository.findAll();
		List<PersonDtoResponse> personDtosResponse= new ArrayList<>();
		for(Person person:persons) {
			PersonDtoResponse personDtoResponse = modelMapper.map(person, PersonDtoResponse.class);
			personDtosResponse.add(personDtoResponse);
		}
		return personDtosResponse;
	}

	@Override
	public PersonDtoResponse update(PersonDtoResponse newPerson) {
		try {
		Person person= modelMapper.map(newPerson, Person.class);
		System.out.println("Updating: " + person.toString());
		Person updatedPerson =personRepository.save(person);
		return modelMapper.map(updatedPerson, PersonDtoResponse.class);
		}catch(Exception e) {
			throw e;
		}
	}

}
