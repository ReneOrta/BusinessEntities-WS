package mx.edu.itcm.businessentities.serviceImpl;
import java.util.ArrayList;
import java.util.List;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import mx.edu.itcm.businessentities.dto.VendorDto;
import mx.edu.itcm.businessentities.dto.VendorDtoResponse;
import mx.edu.itcm.businessentities.entity.Vendor;
import mx.edu.itcm.businessentities.repository.VendorRepository;
import mx.edu.itcm.businessentities.service.VendorService;



@Component
public class VendorServiceImpl implements VendorService {
	
	@Autowired
	VendorRepository vendorRepository;
	
	@Autowired
	ModelMapper modelMapper;
	
	@Override
	public VendorDtoResponse create(VendorDto vendorDto) throws Exception {
		try {
			Vendor vendor=modelMapper.map(vendorDto,Vendor.class);
			System.out.println("Creating: "+vendor.toString());
			Vendor newVendor=vendorRepository.save(vendor);
			return modelMapper.map(newVendor, VendorDtoResponse.class);
		}catch(Exception e) {
			throw e;
		}
	}

	@Override
	public VendorDtoResponse findOneByBEId(int businessEntityID) {
		return modelMapper.map(vendorRepository.findOneByBEId(businessEntityID),VendorDtoResponse.class);
	}

	@Override
	public VendorDtoResponse findOneByAccountNumber(String accountNumber) {
		return modelMapper.map(vendorRepository.findOneByAccountNumber(accountNumber),VendorDtoResponse.class);
	}

	@Override
	public VendorDtoResponse findOneByName(String name) {
		return modelMapper.map(vendorRepository.findOneByName(name), VendorDtoResponse.class);
	}

	@Override
	public List<VendorDtoResponse> getAll() {
		List<Vendor> vendors=vendorRepository.findAll();
		List<VendorDtoResponse> vendorDtosResponse= new ArrayList<>();
		for(Vendor vendor:vendors) {
			VendorDtoResponse vendorDtoResponse = modelMapper.map(vendor, VendorDtoResponse.class);
			vendorDtosResponse.add(vendorDtoResponse);
		}
		return vendorDtosResponse;
	}

	@Override
	public VendorDtoResponse update(VendorDtoResponse newVendor) {
		try {
		Vendor vendor= modelMapper.map(newVendor, Vendor.class);
		System.out.println("Updating: " + vendor.toString());
		Vendor updatedVendor =vendorRepository.save(vendor);
		return modelMapper.map(updatedVendor, VendorDtoResponse.class);
		}catch(Exception e) {
			throw e;
		}
	}

}
