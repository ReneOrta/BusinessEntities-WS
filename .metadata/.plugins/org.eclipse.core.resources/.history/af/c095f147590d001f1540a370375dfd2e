package mx.edu.itcm.businessentities.serviceImpl;

import java.util.ArrayList;
import java.util.List;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

import mx.edu.itcm.businessentities.dto.StoreDto;
import mx.edu.itcm.businessentities.dto.StoreDtoResponse;
import mx.edu.itcm.businessentities.entity.Store;
import mx.edu.itcm.businessentities.repository.StoreRepository;
import mx.edu.itcm.businessentities.service.StoreService;

@Service
@Component
public class StoreServiceImpl implements StoreService {

	@Autowired
	StoreRepository storeRepository;
	
	@Autowired
	ModelMapper modelMapper;
	
	@Override
	public StoreDtoResponse create(StoreDto storeDto) throws Exception {
		try {
			Store store=modelMapper.map(storeDto,Store.class);
			System.out.println("Creating: "+store.toString());
			Store newStore=storeRepository.save(store);
			return modelMapper.map(newStore, StoreDtoResponse.class);
		}catch(Exception e) {
			throw e;
		}
	}

	@Override
	public StoreDtoResponse findOneByBEId(int businessEntityID) {
		return modelMapper.map(storeRepository.findOneByBEId(businessEntityID), StoreDtoResponse.class);
	}

	@Override
	public StoreDtoResponse findOneByName(String Name) {
		return modelMapper.map(storeRepository.findOneByName(Name), StoreDtoResponse.class);
	}

	@Override
	public List<StoreDtoResponse> getAll() {
		List<Store> stores=storeRepository.findAll();
		List<StoreDtoResponse> storeDtosResponse= new ArrayList<>();
		for(Store store:stores) {
			StoreDtoResponse storeDtoResponse = modelMapper.map(store, StoreDtoResponse.class);
			storeDtosResponse.add(storeDtoResponse);
		}
		return storeDtosResponse;
	}

	@Override
	public StoreDtoResponse update(StoreDtoResponse newStore) {
		try {
			Store store= modelMapper.map(newStore, Store.class);
			System.out.println("Updating: " + store.toString());
			Store updatedStore =storeRepository.save(store);
			return modelMapper.map(updatedStore, StoreDtoResponse.class);
			}catch(Exception e) {
				throw e;
			}
	}

}
